name: Compiler workflow
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      mongo:
        description: 'mongo version'
        default: '5.0.26'
        required: false
        type: string
      ubuntu:
        description: 'ubuntu version'
        default: '20.04'
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    strategy:
      matrix:
        platform: ["amd64"]
        # platform: ["amd64", "arm64"]
    runs-on: ubuntu-latest
    timeout-minutes: 360
    outputs:
      ubuntu: ${{ steps.params.outputs.PARAM_UBUNTU }}
      mongo: ${{ steps.params.outputs.PARAM_MONGO }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install yq
      run: |
        pip install yq
    - name: Read YAML config file and set environment variables
      id: params
      run: |
        echo "PARAM_REGISTRY=$(yq -r '.registry' build.yml)" >> $GITHUB_ENV
        echo "PARAM_REGISTRY=$(yq -r '.registry' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_NAMESPACE=$(yq -r '.namespace' build.yml)" >> $GITHUB_ENV
        echo "PARAM_NAMESPACE=$(yq -r '.namespace' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_NAME=$(yq -r '.name' build.yml)" >> $GITHUB_ENV
        echo "PARAM_NAME=$(yq -r '.name' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_UBUNTU=$(yq -r '.ubuntu' build.yml)" >> $GITHUB_ENV
        echo "PARAM_UBUNTU=$(yq -r '.ubuntu' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_MONGO=$(yq -r '.mongo' build.yml)" >> $GITHUB_ENV
        echo "PARAM_MONGO=$(yq -r '.mongo' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_CCFLAGS=$(yq -r '.ccflags_${{ matrix.platform }}' build.yml)" >> $GITHUB_ENV
        echo "PARAM_CCFLAGS=$(yq -r '.ccflags_${{ matrix.platform }}' build.yml)" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Release disk space
      run: |
        echo "=============================================================================="
        echo "Freeing up disk space on CI system"
        echo "=============================================================================="

        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y '^mongodb-.*'
        sudo apt-get remove -y '^mysql-.*'
        sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        echo "Removing large directories"

        sudo rm -rf /usr/share/dotnet/
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/.ghcup/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/lib/node_modules
        df -h

    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/${{ matrix.platform }}
        tags: output:${{ matrix.platform }}
        build-args: |
          BASE_IMAGE=${{ steps.params.outputs.PARAM_NAMESPACE }}/${{ steps.params.outputs.PARAM_NAME }}:${{ steps.params.outputs.PARAM_UBUNTU }}-${{ steps.params.outputs.PARAM_MONGO }}
          MONGO_VERION=${{ steps.params.outputs.PARAM_MONGO }}
          CCFLAGS=${{ steps.params.outputs.PARAM_CCFLAGS }}
        outputs: type=docker,dest=/tmp/output-${{ matrix.platform }}.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: localimage-${{ matrix.platform }}
        path: /tmp/output-${{ matrix.platform }}.tar

  export:
    strategy:
      matrix:
        platform: ["amd64"]
        # platform: ["amd64", "arm64"]
    runs-on: ubuntu-latest
    needs: build
    outputs:
      ubuntu: ${{ needs.build.outputs.ubuntu }}
      mongo: ${{ needs.build.outputs.mongo }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: localimage-${{ matrix.platform }}
        path: /tmp
    - name: Prepare release folder
      run: |
        mkdir -p /tmp/release/${{ matrix.platform }}
    - name: Load image
      run: |
        docker load --input /tmp/output-${{ matrix.platform }}.tar
    - name: Copy bin files to release folder
      run: |
        docker run --rm -v /tmp/release/${{ matrix.platform }}:/release output:${{ matrix.platform }} sh -c "tar -czf /release/bin-${{ matrix.platform }}.tgz /output/*"
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.platform }}
        path: /tmp/release/${{ matrix.platform }}/

  release:
    runs-on: ubuntu-latest
    needs: export
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Remove tag
      run: |
        git tag -d mongo-${{ needs.export.outputs.mongo }}_ubuntu-${{ needs.export.outputs.ubuntu }} || :
        git push origin --delete mongo-${{ needs.export.outputs.mongo }}_ubuntu-${{ needs.export.outputs.ubuntu }} || :
    # - name: Create tag
    #   run: |
    #     git tag mongo-${{ needs.export.outputs.mongo }}_ubuntu-${{ needs.export.outputs.ubuntu }}
    #     git push origin --tags
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        pattern: build-*
        path: release
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/build-*/*
        tag_name: mongo-${{ needs.export.outputs.mongo }}_ubuntu-${{ needs.export.outputs.ubuntu }}
