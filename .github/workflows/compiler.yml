name: Compiler workflow
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    strategy:
      matrix:
        platform: ["amd64", "arm64"]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install yq
      run: |
        pip install yq
    - name: Read YAML config file and set environment variables
      id: params
      run: |
        echo "PARAM_REGISTRY=$(yq -r '.registry' build.yml)" >> $GITHUB_ENV
        echo "PARAM_REGISTRY=$(yq -r '.registry' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_NAMESPACE=$(yq -r '.namespace' build.yml)" >> $GITHUB_ENV
        echo "PARAM_NAMESPACE=$(yq -r '.namespace' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_NAME=$(yq -r '.name' build.yml)" >> $GITHUB_ENV
        echo "PARAM_NAME=$(yq -r '.name' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_UBUNTU=$(yq -r '.ubuntu' build.yml)" >> $GITHUB_ENV
        echo "PARAM_UBUNTU=$(yq -r '.ubuntu' build.yml)" >> $GITHUB_OUTPUT
        echo "PARAM_MONGO=$(yq -r '.mongo' build.yml)" >> $GITHUB_ENV
        echo "PARAM_MONGO=$(yq -r '.mongo' build.yml)" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/${{ matrix.platform }}
        tags: output:${{ matrix.platform }}
        build-args: |
          BASE_IMAGE=${{ steps.params.outputs.PARAM_NAMESPACE }}/${{ steps.params.outputs.PARAM_NAME }}:${{ steps.params.outputs.PARAM_UBUNTU }}-${{ steps.params.outputs.PARAM_MONGO }}
          MONGO_VERION=${{ steps.params.outputs.PARAM_MONGO }}
        outputs: type=docker,dest=/tmp/output-${{ matrix.platform }}.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: localimage-${{ matrix.platform }}
        path: /tmp/output-${{ matrix.platform }}.tar

  export:
    strategy:
      matrix:
        platform: ["amd64", "arm64"]
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: localimage-${{ matrix.platform }}
        path: /tmp
    - name: Load image
      run: |
        docker load --input /tmp/output-${{ matrix.platform }}.tar
    - name: Copy release file
      run: |
        docker run -dit --name output-${{ matrix.platform }} output:${{ matrix.platform }} /bin/bash
        sleep 30
        docker cp output-${{ matrix.platform }}:/etc/os-release /tmp/msg-${{ matrix.platform }}
    - name: Show msg
      run: |
        cat /tmp/msg-${{ matrix.platform }}

